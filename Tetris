package application;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;

import java.util.Random;

public class Tetris extends Application {
    
    public static final int SIZE = 25;
    public static final int WIDTH = 10;
    public static final int HEIGHT = 20;
    private final Pane gamePane = new Pane();
    private final boolean[][] MESH = new boolean[WIDTH][HEIGHT];
    private GameObject currentForm;
    private final Controller controller = new Controller();
    private static int score = 0;
    private static int lines = 0;
    private final Text scoreText = new Text("Score: 0");
    private final Text linesText = new Text("Lines: 0");

    private Timeline timeline;
    public static boolean gameOver = false;

    @Override
    public void start(Stage stage) {
        gamePane.setPrefSize(WIDTH * SIZE, HEIGHT * SIZE);
        gamePane.setStyle("-fx-background-color: #000000;"); // Warna latar belakang hitam
        drawGrid();

        // Tampilan awal
        VBox startMenu = new VBox(10);
        startMenu.setStyle("-fx-alignment: center;");

        Text titleText = new Text("TETRIS");
        titleText.setFont(Font.font("Verdana", 40));
        titleText.setFill(Color.RED);

        Button startButton = new Button("Start");
        startButton.setStyle("-fx-font-size: 16px;");
        startButton.setOnAction(e -> {
            stage.setScene(createGameScene(stage));
            spawnNewForm();
            timeline.play();
        });

        startMenu.getChildren().addAll(titleText, startButton);
        Scene startScene = new Scene(new StackPane(startMenu), WIDTH * SIZE + 100, HEIGHT * SIZE);
        stage.setScene(startScene);
        stage.setTitle("Tetris");
        stage.show();
    }

    private Scene createGameScene(Stage stage) {
        scoreText.setX(WIDTH * SIZE + 10);
        scoreText.setY(20);
        linesText.setX(WIDTH * SIZE + 10);
        linesText.setY(50);

        Pane root = new Pane(gamePane, scoreText, linesText);
        Scene scene = new Scene(root, WIDTH * SIZE + 100, HEIGHT * SIZE);

        scene.setOnKeyPressed(event -> {
            if (gameOver) return;

            try {
                switch (event.getCode()) {
                    case LEFT:
                        if (controller.canMoveLeft(currentForm, MESH)) currentForm.moveLeft();
                        break;
                    case RIGHT:
                        if (controller.canMoveRight(currentForm, MESH)) currentForm.moveRight();
                        break;
                    case DOWN:
                        if (controller.canMoveDown(currentForm, MESH)) currentForm.moveDown();
                        else lockAndSpawnNewForm();
                        break;
                    case UP:
                        currentForm.rotate(MESH);
                        break;
                    default:
                        break;
                }
            } catch (Exception ex) {
                showError("Error processing input: " + ex.getMessage());
            }
        });

        timeline = new Timeline(new KeyFrame(Duration.millis(500), e -> {
            if (!gameOver) {
                try {
                    if (controller.canMoveDown(currentForm, MESH)) {
                        currentForm.moveDown();
                    } else {
                        lockAndSpawnNewForm();
                        if (isGameOver()) {
                            gameOver = true;
                            timeline.stop();
                            stage.setScene(createGameOverScene(stage));
                        }
                    }
                } catch (Exception ex) {
                    showError("Error during game update: " + ex.getMessage());
                }
            }
        }));
        timeline.setCycleCount(Timeline.INDEFINITE);

        return scene;
    }
